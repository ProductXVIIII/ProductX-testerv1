if game.placeId == 3623096087 then
local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/shlexware/Orion/main/source')))()
local Window = OrionLib:MakeWindow({Name = "Product X ðŸ’ªMuscle Legends", IntroText = "Product X by DeLTaXVIIII", SaveConfig = false, ConfigFolder = "DeLTaXVIIII Coinfig"})

--Valus
getgenv().teleport = true
getgenv().selectisland = "Tiny Island"
getgenv().autohatch = true
getgenv().selectcrystal = "Blue Crystal"

--functions
--[[function mainisland()
    local args = {
        [1] = "travelToArea",
        [2] = workspace:WaitForChild("areaCircles"):WaitForChild("areaCircle")
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("areaTravelRemote"):InvokeServer(unpack(args))
end

function tinyisland()
    local args = {
        [1] = "travelToArea",
        [2] = workspace:WaitForChild("areaCircles"):WaitForChild("areaCircle")
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("areaTravelRemote"):InvokeServer(unpack(args))
end

function frostisland()
    local args = {
        [1] = "travelToArea",
        [2] = workspace:WaitForChild("areaCircles"):WaitForChild("areaCircle")
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("areaTravelRemote"):InvokeServer(unpack(args))
end

function mythicalisland()
    local args = {
        [1] = "travelToArea",
        [2] = workspace:WaitForChild("areaCircles"):WaitForChild("areaCircle")
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("areaTravelRemote"):InvokeServer(unpack(args))
end

function eternalisland()
    local args = {
        [1] = "travelToArea",
        [2] = workspace:WaitForChild("areaCircles"):WaitForChild("areaCircle")
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("areaTravelRemote"):InvokeServer(unpack(args))
end

function legendsisland()
    local args = {
        [1] = "travelToArea",
        [2] = workspace:WaitForChild("areaCircles"):WaitForChild("areaCircle")
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("areaTravelRemote"):InvokeServer(unpack(args))
end

function musclekingisland()
    local args = {
        [1] = "travelToArea",
        [2] = workspace:WaitForChild("areaCircles"):WaitForChild("areaCircle")
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("areaTravelRemote"):InvokeServer(unpack(args))
end]]

function teleport()
    local args = {
        [1] = "travelToArea",
        [2] = workspace:WaitForChild("areaCircles"):WaitForChild("areaCircle")}
    game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("areaTravelRemote"):InvokeServer(getgenv().teleport(args))
    local args1 = {
        [1] = "travelToArea",
        [2] = workspace:WaitForChild("areaCircles"):WaitForChild("areaCircle")}
    game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("areaTravelRemote"):InvokeServer(unpack(args1))
    local args2 = {
        [1] = "travelToArea",
        [2] = workspace:WaitForChild("areaCircles"):WaitForChild("areaCircle")}
    game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("areaTravelRemote"):InvokeServer(unpack(args2))
    local args3 = {
        [1] = "travelToArea",
        [2] = workspace:WaitForChild("areaCircles"):WaitForChild("areaCircle")}
    game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("areaTravelRemote"):InvokeServer(unpack(args3))
    local args4 = {
        [1] = "travelToArea",
        [2] = workspace:WaitForChild("areaCircles"):WaitForChild("areaCircle")}
    game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("areaTravelRemote"):InvokeServer(unpack(args4))
    local args5 = {
        [1] = "travelToArea",
        [2] = workspace:WaitForChild("areaCircles"):WaitForChild("areaCircle")}
    game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("areaTravelRemote"):InvokeServer(unpack(args5))
    local args6 = {
        [1] = "travelToArea",
        [2] = workspace:WaitForChild("areaCircles"):WaitForChild("areaCircle")}
    game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("areaTravelRemote"):InvokeServer(unpack(args6))
end

function autohatch()
    local args = {
        [1] = "openCrystal",
        [2] = "Blue Crystal"}
    game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("openCrystalRemote"):InvokeServer(unpack(args))
end

--Taps
local TeleportTab = Window:MakeTab({
	Name = "Teleport",
	Icon = "rbxassetid://4483345998"
})

local EggsTab = Window:MakeTab({
	Name = "Eggs",
	Icon = "rbxassetid://4483345998"
})

--Buttons
TeleportTab:AddButton({
	Name = "Teleport",
	Callback = function(Value)
    getgenv().teleport = Value
    teleport()
  	end    
})

EggsTab:AddButton({
	Name = "Auto Hatch",
	Callback = function(Value)
    getgenv().autohatch = Value
    autohatch()
  	end
})

--Dropdowns
TeleportTab:AddDropdown({
	Name = "Select Island",
	Default = "Tiny Island",
	Options = {"Main Island", "Tiny Island", "Frost Island", "Mythical Island","Eternal Island","Legends Island","Muscleking Island",},
	Callback = function(Value)
    getgenv().selectisland = Value
    print(getgenv().selectisland)
	end
})

EggsTab:AddDropdown({
	Name = "Select Egg",
	Default = "Blue Crystal",
	Options = {"Blua Crystal",},
	Callback = function(Value)
    getgenv().autohatch = Value
    print(getgenv().selectcrystal)
	end
})

MiscTab = Window:MakeTab({
	Name = "Misc",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})

--[[
Name = <string>
Icon = <string>
PremiumOnly = <bool>
]]

MiscTab:AddButton({
	Name = "Anti afk",
	Callback = function()
      		local VirtualInputManager = Instance.new("VirtualInputManager")
local UserInputService = game:GetService("UserInputService")
local Hooks = {}

local function TrueString(String)
    if type(String) ~= "string" then
        return false
    end

    return (string.split(String, "\0"))[1]
end

local function SortArguments(self, ...)
    return self, {...}
end

local function hookGetSerivce(...)
    local OldGetService; OldGetService = function(...)
        local self, Index = ...
        local Response = OldGetService(...)
    
        if type(Index) == "string" and TrueString(Index) == "VirtualInputManager" then
            error(("'%s' is not a valid Service name"):format(TrueString(Index)))
            return;
        end
    
        return Response
    end
end

local OldFindService = hookfunction(game.FindService, function(...)
    local self, Index = ...
    local Response = OldFindService(...)

    if type(Index) == "string" and TrueString(Index) == "VirtualInputManager" then
        return;
    end

    return Response
end)

hookGetSerivce(game.GetService)
hookGetSerivce(game.getService)
hookGetSerivce(game.service)

local OldNamecall; OldNamecall = hookmetamethod(game, "__namecall", function(...)
    local self, Arguments = SortArguments(...)
    local Method = getnamecallmethod()

    if typeof(self) == "Instance" and self == game and Method:lower():match("service") and TrueString(Arguments[1]) == "VirtualInputManager" then
        if Method == "FindService" then
            return;
        end

        local Success, Error = pcall(function()
            setnamecallmethod(Method)
            game[Method](game, "VirtualFuckOff")
        end)

        if not Error:match("is not a valid member") then
            error(Error:replace("VirtualFuckOff", "VirtualInputManager"))
            return;
        end
    end

    return OldNamecall(...)
end)

local OldWindow; OldWindow = hookmetamethod(UserInputService.WindowFocused, "__index", function(...)
    local self, Index = ...
    local Response = OldWindow(...)

    if type(Response) ~= "function" and (tostring(self):find("WindowFocused") or tostring(self):find("WindowFocusReleased")) and not table.find(Hooks, Response) then
        table.insert(Hooks, Response)

        if Index:lower() == "wait" then
            local Old2; Old2 = hookfunction(Response, function(...)
                local self1 = ...

                if self1 == self then
                    self1 = Instance.new("BindableEvent").Event
                end

                return Old2(self1)
            end)
        elseif Index:lower() == "connect" then
            local Old2; Old2 = hookfunction(Response, function(...)
                local self1, Function = ...

                if self1 == self then
                    Function = function() return; end
                end

                return Old2(self1, Function)
            end)
        end
    end

    return Response
end)

for i, v in next, getconnections(UserInputService.WindowFocusReleased) do
    v:Disable()
end

for i, v in next, getconnections(UserInputService.WindowFocused) do
    v:Disable()
end

if not iswindowactive() and not getgenv().WindowFocused then
    firesignal(UserInputService.WindowFocused)
    getgenv().WindowFocused = true
end

while true do
    VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.Unknown, false, game)

    task.wait(Random.new():NextNumber(15, 120))
end
  	end    
})

--[[
Name = <string> - The name of the button.
Callback = <function> - The function of the button.
]]


MiscTab:AddButton({
	Name = "Night Sky",
	Callback = function()
      		local Lighting = game:GetService("Lighting")


Lighting.ClockTime = 0          
Lighting.Brightness = 0         
Lighting.GlobalShadows = false  
Lighting.OutdoorAmbient = Color3.new(0.1, 0.1, 0.2)  
Lighting.Ambient = Color3.new(0.1, 0.1, 0.2)         


end
OrionLib:Init()
